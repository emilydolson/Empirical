The core idea for evo should be a layered world object, specified by a template.

The Layers

BASE: Includes a vector of organisms
      + Pointer to "next" vector that points to main vector by default.
      + all member functions in all other layers with either default functionality or errors.

EA:   Adds vector for next generation + changes "next" pointer to new vector

PopStructure (mixed, grid, pools)

Genotype: Determine genotype of organism; either same as org -OR- defined in org?

CalcFit: Figure out how to calculate fitness (either provided or member function).

DoMut: Figure out how to perform mutations (lots of options, possibly with config.)

FitCache: Track each organism's fitness so that it needs to be calculated only once.

FitTrack: Always calculate fitness on insertion and track it (in relation to others)

Environment

Stats: Add extra features to track what's going on in the world.
       (We probably want multiple versions depending on what type of stats we're collecting)

TrackLineage: calculate the full phylogeny as populations continue.

Signals: Tie signals into any of the above functions to override them in a more dynamic way.


OTHER NOTES:
* Right now cannot index to a nullptr position; can setup a default.
* Should we allow a non const operator[] ?  Would need to make sure it calls other pieces
  correctly on an assignment.
* Move selection methods into their own module?  There are many of them BUT extra member functions
  shouldn't hurt performance, so it might be fine to just keep them in the world.  OR just move
  into their own file?
